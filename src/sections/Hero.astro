---
import Button from "@components/Button.astro";
import { Icon } from "astro-icon/components";
---

<section
  class="w-full h-full md:h-screen pt-24 pb-16 px-5 flex flex-col justify-center"
>
  <div
    class="grid grid-cols-1 w-full h-full gap-8 max-h-[1000px]
  md:grid-cols-2fr-1fr"
  >
    <div class="flex flex-col w-full h-full">
      <div id="input" class="w-full h-full min-h-[400px]">
        <textarea
          placeholder="Ingrese el texto aqui..."
          class="outline-none w-full h-full outline outline-white/5 rounded-sm resize-none bg-[#0f1726]/50
      backdrop-blur border-none p-5 text-white placeholder:text-slate-400"
      maxlength="150"
        ></textarea>
      </div>
      <div class="flex flex-col mt-4">
        <div class="flex flex-col gap-1">
          <span
            id="require-3"
            class="flex gap-2 text-gray-400 text-sm font-normal"
            ></span
          >
          <span
            id="require-1"
            class="flex gap-2 text-gray-400 text-sm font-normal"
            ><Icon name="info" size={15} />No mayúsculas.</span
          >
          <span
            id="require-2"
            class="flex gap-2 text-gray-400 text-sm font-normal"
            ><Icon name="info" size={15} />No carácteres especiales.</span
          >
        </div>
        <div class="flex gap-4">
          <Button title="Encriptar" bgColor="106b96" id="encrypt-btn" />
          <Button title="Desencriptar" bgColor="132941" id="decrypt-btn" />
        </div>
      </div>
    </div>
    <div
      id="output"
      class="w-full flex flex-col justify-center items-center bg-[#1f283b]/50 rounded-sm outline outline-white/5 backdrop-blur relative p-5"
    >
      <span
        class="absolute top-0 left-0 px-2 py-1 m-2 tracking-tight text-gray-400"
        >Salida</span
      >
      <button
        id="copy"
        class="absolute top-0 right-0 text-xs m-2 flex gap-2 itms-center justify-center text-gray-400 bg-gray-700 px-2 py-1 rounded-md hover:bg-gray-600 transition-colors hover:text-gray-200"
      >
        <span>Copiar</span>
        <img src="src/icons/copy.svg" alt="copy" />
      </button>

      <div
        id="output-content"
        class="flex flex-col justify-center items-center "
      >
        <div class="flex justify-start items-start w-full h-full">
          <p id="text-content" class="tracking-tight text-white mt-8 text-base break-words max-w-[350px]">
          </p>
        </div>
        <div
          id="output-waiting"
          class="flex flex-col justify-center items-center"
        >
          <img
            id="waiting-img"
            src="/woman.svg"
            alt="woman"
            class="aspect-square"
            width="200"
          />
          <h4
            id="waiting-title"
            class="text-white text-xl font-semibold text-center text-balance leading-tight mb-2"
          >
            Ningún mensaje fue encontrado
          </h4>
          <p
            id="waiting-paragraph"
            class="text-gray-400 text-sm max-w-[340px] text-center text-balance leading-snug"
          >
            Ingresa el texto que desees encriptar o desencriptar.
          </p>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // change of content of output container
  const textArea = document.querySelector("textarea");
  const encryptedField = document.getElementById("text-content");
  const waitingImg = document.querySelector(
    "#output-content img"
  ) as HTMLImageElement;

  const waitingTitle = document.getElementById("waiting-title");
  const waitingParagraph = document.getElementById("waiting-paragraph");
  const encryptBtn = document.getElementById("encrypt-btn");
  const decryptBtn = document.getElementById("decrypt-btn");
  const outputWaiting = document.getElementById("output-waiting");
  const outputContainer = document.getElementById("output");
  const inputContainer = document.getElementById("input");
  const copyBtn = document.getElementById("copy");
  

  let mayusRequirement = true;
  let specialCharsRequirement = true;

  function updateOutputContainerHeight() {
    outputContainer.style.height = inputContainer.offsetHeight + "px";

    if (window.innerWidth < 768) {
      outputContainer.style.height = "100%";
    }
  }

  // requestAnnimationFrame functionality to update output container height
  // only if the resize event is triggered or lag is present

  // function updateOutputContainerHeightOnAnimationFrame() {
  //   requestAnimationFrame(updateOutputContainerHeight);
  // }

  updateOutputContainerHeight();

  textArea.addEventListener("input", (e) => {
    let content = (e.target as HTMLTextAreaElement).value.trim();
    const maxLength = 150;

    const hasUpperCase = /[A-Z]/.test(content);
    const hasSpecialChars =
      /[áéíóúÁÉÍÓÚüÜñÑ!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/.test(content);

    mayusRequirement = hasUpperCase;
    specialCharsRequirement = hasSpecialChars;

    if(mayusRequirement){
      document.getElementById("require-1").style.color = "rgb(248 113 113)";
    } else if(specialCharsRequirement) {
      document.getElementById("require-2").style.color = " rgb(248 113 113)";
    } else{
      document.getElementById("require-1").style.color = "rgb(163 230 53)";
      document.getElementById("require-2").style.color = "rgb(163 230 53)";
    }
    
    if (content !== "") {
      showWaitingTextareaMessage();
    } else {
      showEmptyTextareaMessage();
    }

    const remainingChars = maxLength - content.length;
    document.getElementById("require-3").textContent = `${remainingChars} caracteres restantes`;

    if(remainingChars < 0){
      content = content.slice(0, maxLength);
      document.getElementById("require-3").textContent = `${0} caracteres restantes`;
    }
    
    
  });

  // encrypt and decrypt functions
  const encrypt = (text) => {
    text = text.replace(/e/g, "enter");
    text = text.replace(/i/g, "imes");
    text = text.replace(/a/g, "ai");
    text = text.replace(/o/g, "ober");
    text = text.replace(/u/g, "ufat");

    return text;
  };

  const decrypt = (text) => {
    text = text.replace(/enter/g, "e");
    text = text.replace(/imes/g, "i");
    text = text.replace(/ai/g, "a");
    text = text.replace(/ober/g, "o");
    text = text.replace(/ufat/g, "u");

    return text;
  };

  // add event listeners to buttons
  encryptBtn.addEventListener("click", () => {
    const content = textArea.value.trim();

    const hasUpperCase = /[A-Z]/.test(content);
    const hasSpecialChars =
      /[áéíóúÁÉÍÓÚüÜñÑ!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/.test(content);

    mayusRequirement = hasUpperCase;
    specialCharsRequirement = hasSpecialChars;

    if (content.length > 0 && !mayusRequirement && !specialCharsRequirement) {
      showWaitingTextareaMessage();
      outputContainer.style.justifyContent = "start";
      outputContainer.style.alignItems = "start";
      outputWaiting.style.display = "none";
      const encryptedText = encrypt(content);
      encryptedField.textContent = encryptedText;
    } else {
      showEmptyTextareaMessage();
    }

    decryptBtn.addEventListener("click", () => {
      const content = textArea.value.trim();

      const hasUpperCase = /[A-Z]/.test(content);
      const hasSpecialChars =
        /[áéíóúÁÉÍÓÚüÜñÑ!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/.test(content);

      mayusRequirement = hasUpperCase;
      specialCharsRequirement = hasSpecialChars;
      if (content.length > 0 && !mayusRequirement && !specialCharsRequirement) {
        showWaitingTextareaMessage();
        outputContainer.style.justifyContent = "start";
        outputContainer.style.alignItems = "start";
        outputWaiting.style.display = "none";
        const decryptedText = decrypt(content);
        encryptedField.textContent = decryptedText;
      } else {
        showEmptyTextareaMessage();
      }
    });
  });

  copyBtn.addEventListener("click", () => {
    const text = encryptedField.textContent;
    const copyIcon = document.querySelector("#copy img") as HTMLImageElement;

    if (text.length > 0) {
      navigator.clipboard.writeText(text).then(() => {
        copyIcon.src = "src/icons/check.svg";
        setTimeout(() => {
          copyIcon.src = "src/icons/copy.svg";
        }, 1200);
      });
    }
  });

  // show message when textarea is empty
  function showEmptyTextareaMessage() {
    waitingImg.src = "woman.svg";
    waitingTitle.textContent = "Ningún mensaje fue encontrado";
    waitingParagraph.textContent =
      "Ingresa el texto que desees encriptar o desencriptar.";
    outputWaiting.style.display = "flex";
    encryptedField.textContent = "";
    outputContainer.style.justifyContent = "center";
    outputContainer.style.alignItems = "center";
  }

  // show message when textarea is waiting for action
  function showWaitingTextareaMessage() {
    waitingImg.src = "paper.svg";
    waitingTitle.textContent = "Esperando acción...";
    waitingParagraph.textContent =
      "Presione el botón de encriptar o desencriptar para ver el resultado.";
    outputWaiting.style.display = "flex";
    encryptedField.textContent = "";
    outputContainer.style.justifyContent = "center";
    outputContainer.style.alignItems = "center";
  }


  
</script>
